{"name":"Intltool","tagline":"","body":"intltool README\r\n===============\r\n\r\nIf you have problems understanding this README file, then please report \r\nthese at http://bugs.launchpad.net/intltool on Launchpad. Patches are\r\nalso very welcome. See HACKING for more information on submitting patches.\r\n\r\nThe intltool collection can be used to do these things:\r\n\r\n o Extract translatable strings from various source files (.xml.in,\r\n   .glade, .desktop.in, .server.in, .oaf.in).\r\n\r\n o Collect the extracted strings together with messages from traditional\r\n   source files (.c, .h) in po/$(PACKAGE).pot.\r\n\r\n o Merge back the translations from .po files into .xml, .desktop and\r\n   .oaf files.  This merge step will happen at build resp. installation\r\n   time.\r\n\r\nThe intltool package has a script, intltoolize, which copies the various\r\nscripts and does the other magic to your module. So users building\r\nfrom tarballs don't need intltool, only folks building from cvs.\r\n(This is modelled on gettextize.)\r\n\r\n\r\nHow to Use with autoconf/automake\r\n---------------------------------\r\n(There is a section for non-auto* configurations below)\r\n\r\nTo use intltool in your module, do the following:\r\n\r\n o Install intltool, and make sure that the macro it installs is\r\n   in aclocal's path, or do:\r\n\r\n\texport ACLOCAL_FLAGS='-I /usr/local/share/aclocal' \r\n\r\n o Add these lines to autogen.sh, after the call to gettextize:\r\n\r\n\techo \"Running intltoolize\"\r\n\tintltoolize --copy --force --automake\r\n\r\n o Add this line to configure.in near the top\r\n\r\n\tIT_PROG_INTLTOOL([minimum required version], [no-xml])\r\n\r\n o Add intltool-extract, intltool-merge, and intltool-update to\r\n   DISTCLEANFILES in your top-level Makefile.am.\r\n\r\n o Remove po/desk.pl and po/update.* scripts.  intltool-update will take\r\n   over their functionality.\r\n\r\nAt this point, translatable strings will be automatically extracted to\r\nthe .po files, if you make use of the following recommendations.\r\n\r\nThe intltool-prepare script will help you to prepare the package. It will\r\ntry to extract translations from existing .desktop files which will\r\nbecome obsolete after intltoolization has taken place.\r\n\r\nExamples of packages that use intltool are many of the GNOME components:\r\nfind them at http://git.gnome.org/.\r\n\r\nDetails of the IT_PROG_INTLTOOL macro\r\n-------------------------------------------\r\n\r\nThe first parameter indicates the minimum required version. The\r\nconfigure script will halt if the version is older than the first\r\nparameter.\r\n\r\nThe second parameter is to tell intltool that we don't need the\r\nextended xml parsing abilities provided by the XML::Parser perl\r\nmodule. If it is not provided, or is any value other than \"no-xml\",\r\nthen XML::Parser will be checked for by the configure script. This\r\nfeature is only available in intltool 0.31 or newer.\r\n\r\nExtra Steps for DESKTOP Files\r\n..............................\r\n\r\nThis step also applies for similar files (.directory, .soundlist).\r\n\r\n o Try to run intltool-prepare.\r\n\r\n o Make sure intltool-prepare did find existing translations in the old\r\n   .desktop files and did correctly merge them into the various po/*.po\r\n   files.  Don't forget to commit the changed .po files; otherwise\r\n   exiting translations will get lost!\r\n\r\n o Remove old .desktop files and add new .desktop.in files.\r\n\r\n o Adjust .cvsignore, .gitignore, .bzrignore or similar.\r\n\r\n o Adjust Makefile.am, e.g.:\r\n\r\n\t--- start ----\r\n\r\n        utilsdir = $(datadir)/gnome/apps/Utilities\r\n        utils_in_files = bug-buddy.desktop.in\r\n        utils_DATA = $(utils_in_files:.desktop.in=.desktop)\r\n        @INTLTOOL_DESKTOP_RULE@\r\n\r\n\t--- end ----\r\n\r\n o Add .desktop.in files to po/POTFILES.in\r\n\r\nHere's a .desktop.in example:\r\n\r\n\t--- start ----\r\n\r\n        [Desktop Entry]\r\n        _Name=Bug Report Tool\r\n        _Comment=Report a bug in GNOME\r\n        Exec=bug-buddy\r\n        Icon=bug-buddy\r\n        Terminal=false\r\n        Type=Application\r\n\r\n\t--- end ----\r\n\r\n\r\nExtra Steps for GLADE Files\r\n...........................\r\n\r\n o Add the .glade files you want translated to POTFILES.in\r\n\r\n o Remove the intermediate *-glade.h or strings-glade.c files and drop\r\n   them from POTFILES.in\r\n\r\n\r\nExtra Steps for SERVER Files (formerly .server)\r\n.............................\r\n\r\nTo get server translation extraction and merging requires a few more steps:\r\n\r\n o Rename your .server files to .server.in and put an\r\n   underscore before every value property for string attributes that should\r\n   be localized.\r\n\r\n o Add the new .server.in or .server.in files to POTFILES.in.\r\n\r\n o Put lines like these in every Makefile.am that installs oaf files:\r\n \r\n\t--- start ----\r\n \r\n\tserverdir = $(libdir)/bonobo/servers\r\n \r\n\tserver_in_files = My_Server_file.server.in\r\n\tserver_DATA = $(server_in_files:.server.in=.server)\r\n \r\n\t@INTLTOOL_SERVER_RULE@\r\n \r\n\tEXTRA_DIST=$(server_in_files) $(server_DATA)\r\n \r\n\t--- end ----\r\n\r\nAt this point, your server translations will be extracted and merged.\r\n\r\nExtra Steps for XML Files (Files with .xml Extension)\r\n.....................................................\r\n\r\nTo get xml (files with .xml extension) translation extraction \r\nand merging requires these steps:\r\n\r\n o Rename your .xml files to .xml.in and put an underscore before \r\n   every element that should be localized.\r\n\r\n o Add the .xml.in files to POTFILES.in.\r\n\r\n o Put lines like these in every Makefile.am that installs xml files:\r\n\r\n        --- start ----\r\n\r\n        xmldir = $(datadir)/xml\r\n\r\n        xml_in_files = My_xml_file.xml.in\r\n        xml_DATA = $(xml_in_files:.xml.in=.xml)\r\n\r\n        @INTLTOOL_XML_RULE@\r\n\r\n        EXTRA_DIST=$(xml_in_files) $(xml_DATA)\r\n\r\n        --- end ----\r\n\r\nAt this point, your xml translations will be extracted and\r\nmerged. All .po files will be converted on the fly to UTF-8, and the\r\nresulting XML file will have a UTF-8 effective encoding (you should\r\nmake sure that the encoding=\"...\" declaration in the .xml.in file is\r\neither absent or actually specifies UTF-8).\r\n\r\nPrevious versions of intltool generated XML files whose contents\r\nwere made of the contents of the .po files, without paying attention\r\nto the encodings used. A single \"XML\" file could thus have strings in\r\ndifferent encodings. This broken behavior can be requested only by\r\nusing the old xml-i18n-tools API instead of the intltool one. See old\r\nversions of xml-i18n-tools for documentation on how the old API worked.\r\n\r\n---\r\n\r\nXXX: add section for KEYS files. Works almost like XML files .\r\n\r\nHow to use without autoconf/automake\r\n------------------------------------\r\n\r\nintltool can also be used without the auto* tools. For instance in order \r\nto translate a somename.desktop.in file, you can do the following.\r\n\r\n o Create a po/ dir.\r\n o Add a po/POTFILES.in file, including the path to the \r\n   somename.desktop.in  file\r\n\r\nThen to create the somename.desktop file all you do is:\r\n\r\n$ intltool-merge po/ -d -u -c po/.intltool-merge-cache somename.desktop.in\r\nsomename.desktop\r\n\r\nYou can also type intltool-merge --help for a bit more info.\r\n\r\nTo specify parameters for intltool-update (such as keywords or gettext\r\ndomain), you can use Makevars syntax as used in recent GNU gettext, by\r\nputting something like the following in po/Makevars file:\r\n\r\n  DOMAIN = mydomain\r\n  XGETTEXT_OPTIONS = --keyword --keyword=blah\r\n\r\nThis will make \"intltool-update -p\" produce mydomain.pot, passing\r\nparameters \"--keyword --keyword=blah\" to xgettext when extracting\r\nstrings.\r\n\r\nPassing special parameters to xgettext via environment\r\n......................................................\r\n\r\nIf you need to add parameters passed to xgettext on a case-by-case\r\nbasis, you can do so using environment variable XGETTEXT_ARGS.\r\n\r\nIf you would run it as follows:\r\n\r\n\tXGETTEXT_ARGS=--no-location intltool-update -p\r\n\r\nYou would create a PO Template file without lines which indicate\r\nlocation of messages in the source code.\r\n\r\n\r\nChanging keywords used in xgettext invocation\r\n.............................................\r\n\r\nIf you need to change default keywords used to extract messages from \r\nsource code, you need to add variable XGETTEXT_KEYWORDS to \r\nMakefile.in.in file inside directory where intltool-update is run\r\nfrom, eg.\r\n\r\n        --- start ----\r\n\r\n        XGETTEXT_KEYWORDS = --keyword --keyword=P_\r\n\r\n        --- end ----\r\n\r\nDefault keywords xgettext looks for if no XGETTEXT_KEYWORDS is defined\r\nare _, N_ and U_. \r\n\r\n\r\nTranslators' comments in XML and .schemas files\r\n...............................................\r\n\r\nTo provide comments to translators in free-form XML or .schema files, \r\nyou need to precede the string to be translated with the plain XML \r\ncomment.\r\n\r\nIn .schemas files, comments need to be inside <default>, <short> or \r\n<long> elements (i.e. they cannot be before the opening tag).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}